group_by(quadrat) %>%
summarize(
canopy_count2013 = sum(is_canopy == 1, na.rm = T),
non_canopy_count2013 = sum(is_canopy == 0,  na.rm = T)
) %>%
mutate(canopy_prop2013 = canopy_count2013 / ( canopy_count2013 + non_canopy_count2013))
quad2008 <- understory2008 %>%
group_by(quadrat) %>%
summarize(
canopy_count2008 = sum(is_canopy == 1, na.rm = T),
non_canopy_count2008 = sum(is_canopy == 0,  na.rm = T)
) %>%
mutate(canopy_prop2008 = canopy_count2008 / ( canopy_count2008 + non_canopy_count2008))
#expand 2023 map to all finished columns, letting unfinshed quads be NA AND join tables
proportion_difference <- quad2013 %>%
left_join(quad2023, by = "quadrat")  %>%
left_join(quad2018, by = "quadrat") %>%
left_join(quad2008, by = "quadrat") %>%
mutate(prop_difference_1323 = (canopy_prop2023 - canopy_prop2013) *100, #calculate difference of canopy proportion for 10 year change
prop_difference_0823 = (canopy_prop2023 - canopy_prop2008) *100,) #calculate difference of canopy proportion for 15 year change
####calculate difference of canopy proportion from 2013 to 2023
###proportion_difference$prop_difference <- ((proportion_difference$canopy_prop2023 - proportion_difference$canopy_prop2008)*100)
#create shapefile to merge quadrat data and percent change
displayChange <- merge(quadrats, proportion_difference, by.x = "PLOT", by.y = "quadrat")
###############################################################################################################################################
#maps with min and max thresholds
#######create colors for diverging color ramp
######colors <- c("red", "white", "blue")
###
####set threashold
###uth <- 50 #upper threshold
###lth <- -50 #lower threshold
###
####plot 10 year change using ggplot
###
###ggplot() +
###  geom_sf(data = displayChange[displayChange$prop_difference_1323 <= lth,], fill = "darkblue") +
###  geom_sf(data = displayChange[displayChange$prop_difference_1323 >= uth,], fill = "darkred") +
###  geom_sf(data = displayChange[displayChange$prop_difference_1323 < uth & displayChange$prop_difference_1323 > lth, ], aes(fill = prop_difference_1323)) +
###  scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0,  name = "Percent Change", limits = c(lth, uth)) +
###  geom_sf(data = st_centroid(displayChange[displayChange$prop_difference_1323 <= lth | displayChange$prop_difference_1323 >= uth,]), col = "white") +
###  labs(title = "Change of Canopy Recruits of 10 Years :)")
###
####plot 15 year change using ggplot
###
###ggplot() +
###  geom_sf(data = displayChange[displayChange$prop_difference_0823 <= lth,], fill = "darkblue") +
###  geom_sf(data = displayChange[displayChange$prop_difference_0823 >= uth,], fill = "darkred") +
###  geom_sf(data = displayChange[displayChange$prop_difference_0823 < uth & displayChange$prop_difference_0823 > lth, ], aes(fill = prop_difference_0823)) +
###  geom_sf( show.legend = TRUE) +
###  scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0,  name = "Percent Change", limits = c(lth, uth)) +
###  geom_sf(data = st_centroid(displayChange[displayChange$prop_difference_0823 <= lth | displayChange$prop_difference_0823 >= uth,]), col = "white", show.legend = TRUE) +
###  labs(title = "Change of Canopy Recruits of 15 Years :)")
###############################################################################################################################################
#cut breaks in prop_difference for 15 years
displayChange$prop_difference_0823_cuts <- cut(displayChange$prop_difference_0823, c(-100, -75, -50, -25, 0, 25, 50, 75, 100))
#create column for filtering quads with little to no stems in understory
displayChange$noStem <- displayChange$canopy_count2023 + displayChange$non_canopy_count2023
#create plot based on assigned breaks
ggplot() +
geom_sf(data = displayChange, aes(fill = prop_difference_0823_cuts)) +
geom_sf(data = subset.data.frame(displayChange, noStem <= 7) , fill = "black") +
scale_fill_brewer(name = "Percent Change",  palette = "RdBu") +
labs(title = "Change of Canopy Recruits in ForestGEO SCBI")
ggsave("15yrschange.png", width = 5, height = 7, units = "in", dpi = 300)
##############################################################################################################################################
library(tidyverse)
library(ggplot2)
library(allodb)
census<- read.csv("data/census_data/scbi.stem4.csv")#loading in current census data
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem1.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem2.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem3.rdata"))
library(tidyverse)
library(ggplot2)
library(allodb)
census<- read.csv("data/census_data/scbi.stem4.csv")#loading in current census data
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem1.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem2.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem3.rdata"))
Census2008 <- scbi.stem1
Census2013 <- scbi.stem2
Census2018 <- scbi.stem3
completeQuadrats <- unique(census$quadrat)
hectaresMeasured <- length(completeQuadrats)*20*20/10000
Census2008 <- subset(Census2008, Census2008$quadrat%in%completeQuadrats)
Census2013 <- subset(Census2013, Census2013$quadrat%in%completeQuadrats)
Census2018 <- subset(Census2018, Census2018$quadrat%in%completeQuadrats)
latlong <- c(-78.1454, 38.8935)
sp.table <- read.csv(paste0("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/species_lists/Tree%20ecology/SCBI_ForestGEO_sp_ecology.csv"))
recruit1 <- Census2008$DFstatus%in%"prior" & Census2013$DFstatus%in%"alive"
recruitment08to13 <- Census2013[recruit1, ] #indexes 2013 census based on subset that was prior in 2008 and alive in 2013, aka recruited in 2013
recruitment08to13 <- merge(recruitment08to13, sp.table, by.x ="sp", by.y = "spcode") ##merge species onto the subset we want to use
recruitment08to13$allodbAGB<- get_biomass(dbh=as.numeric(recruitment08to13$dbh)/10, genus= recruitment08to13$genus, species = recruitment08to13$species.y, coords =latlong)
biomassKg1 <- sum(recruitment08to13$allodbAGB)
biomassRecruited1 <- sum(recruitment08to13$allodbAGB)/1000/hectaresMeasured/5 #gives biomass lost per hectare measured in Mg per year (the divide by 5 is per year)
##2013 to 2018, we will call this interval 2
recruit2 <- Census2008$DFstatus%in%"prior" & Census2013$DFstatus%in%"alive"
recruitment13to18 <- Census2018[recruit2, ]
recruitment13to18 <- merge(recruitment13to18, sp.table, by.x ="sp", by.y = "spcode")
recruitment13to18$allodbAGB<- get_biomass(dbh=as.numeric(recruitment13to18$dbh)/10, genus= recruitment13to18$genus, species = recruitment13to18$species.y, coords =latlong)
biomassKg2 <- sum(recruitment13to18$allodbAGB, na.rm = TRUE)
biomassRecruited2 <- sum(recruitment13to18$allodbAGB, na.rm = TRUE)/1000/hectaresMeasured/5
## 2018 to 2023
recruit3 <- subset(census, table== "recruits")
recruitment18to23 <- merge(recruit3, sp.table, by.x ="sp", by.y = "spcode")
recruitment18to23$allodbAGB<- get_biomass(dbh=as.numeric(recruitment18to23$dbh_current)/10, genus= recruitment18to23$genus,
species = recruitment18to23$species.y, coords =latlong)
biomassKg3 <- sum(recruitment18to23$allodbAGB, na.rm = TRUE)
biomassRecruited3 <- sum(recruitment18to23$allodbAGB, na.rm = TRUE)/1000/hectaresMeasured/5
Year <- c(2013, 2018, 2023)
Interval <- c("2008to2013", "2013to2018", "2018tp2023")
Flux <- c("AWR")
Value <- c(biomassRecruited1, biomassRecruited2, biomassRecruited3)
figure3_biomassRecruited <- data.frame(Flux, Year, Interval,Value )
write.csv(biomassRecruited, "doc/figure3_biomassRecruited.csv", row.names=TRUE)
write.csv(figure3_biomassRecruited, "doc/figure3_biomassRecruited.csv", row.names=TRUE)
awrtable <- read.csv("doc/figure3_biomassRecruited.csv")
awmtable <- read.csv("doc/mortalityFluxData.csv")
awptable <- read.csv("doc/woodyGrowthFlux.csv")
biomassfluxtable <- rbind(awrtable, awmtable, awptable)
ggplot(biomassfluxtable, aes(x=Interval, y=Value, group=Flux, col=Flux)) +
geom_line()
##calculating mortality fluxes accounting for 2023 data being different
##end goal: biomass fluxes per year
##started november 10, 2023 by Iris Kennedy
library(tidyverse)
library(ggplot2)
library(allodb)#allometry package
Census2023<- read.csv("data/census_data/scbi.stem4.csv")#loading in current census data, note this is from my local computer, you will have to change the filepath
Census2008 <- load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem1.rdata"))
Census2013 <- load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem2.rdata"))
Census2018 <-load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem3.rdata"))
#renaming data
Census2008 <- scbi.stem1
Census2013 <- scbi.stem2
Census2018 <- scbi.stem3
#info for using allodb
latlong <- c(-78.1454, 38.8935)
sp.table <- read.csv(paste0("https://raw.githubusercontent.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/master/species_lists/Tree%20ecology/SCBI_ForestGEO_sp_ecology.csv"))
#merge species table into each census data set
Census2008 <- merge(Census2008, sp.table, by.x ="sp", by.y = "spcode")
Census2013 <- merge(Census2013, sp.table, by.x ="sp", by.y = "spcode")
Census2018 <- merge(Census2018, sp.table, by.x ="sp", by.y = "spcode")
Census2023 <- merge(Census2023, sp.table, by.x ="sp", by.y = "spcode")
# creating complete quadrats object including only the quadrats completed in 2023 census, and creating hectaresMeasured to convert the completed quadrats from square meters into hectares
completeQuadrats <- unique(Census2023$quadrat)##stores complete quadrats as a vector, now we can use subset
hectaresMeasured <- length(completeQuadrats)*20*20/10000 #fixed number size of our plot, 25.6, dividing 20/20/1000 puts m^2 in hectares
#subset each previous census to only the quadrats completed in current census
Census2008 <- subset(Census2008, Census2008$quadrat%in%completeQuadrats)
Census2013 <- subset(Census2013, Census2013$quadrat%in%completeQuadrats)
Census2018 <- subset(Census2018, Census2018$quadrat%in%completeQuadrats)
#creating unique id (uid) for each census using tree id tag and stem tag, paste with _ used because without it you get duplicates
Census2008$uid <- paste(Census2008$tag, Census2008$StemTag, sep = "_")
Census2013$uid <- paste(Census2013$tag, Census2013$StemTag, sep = "_")
Census2018$uid <- paste(Census2018$tag, Census2018$StemTag, sep = "_")
Census2023$uid <- paste(Census2023$tag, Census2023$StemTag, sep = "_")
Census2008$AGB_2008 <- get_biomass(dbh=as.numeric(Census2008$dbh)/10, genus= Census2008$genus, species = Census2008$species, coords =latlong) #dividing dbh by 10 puts it in the right unit (cm?), outputs biomass in Kg
Census2013$AGB_2013 <- get_biomass(dbh=as.numeric(Census2013$dbh)/10, genus= Census2013$genus, species = Census2013$species, coords =latlong)
Census2018$AGB_2018 <- get_biomass(dbh=as.numeric(Census2018$dbh)/10, genus= Census2018$genus, species = Census2018$species, coords =latlong)
Census2023$AGB_2023 <- get_biomass(dbh=as.numeric(Census2023$dbh_current)/10, genus= Census2023$genus, species = Census2023$species, coords =latlong) #note in this data set dbh is called dbh_current
all(Census2008$tag==Census2013$tag) ## function all checks if everything is true in this statement
all(Census2008$StemTag==Census2013$StemTag) #if true data sets are ordered the same way
idx1 <- Census2008$status%in%"A" & Census2013$status%in%c("D", "G")
mortality08to13 <- Census2008[idx1, ] #indexes 2008 census to be just the trees that died 08 to 13, note we have to index the prior census (2008) because the dead trees in 2013 will have dbh=0 so no biomass
mortalityBySpecies1 <- mortality08to13 %>% #grouping  by species to calculate species specific mortality
group_by(sp) %>% #group by species
summarise(biomass=sum(AGB_2008)) %>% #create new column called biomass in this new object
add_column(Interval= "2008 to 2013") %>%
mutate(biomassLossPerHectareSpecies = biomass/hectaresMeasured)
kgLost1 <- sum(mortality08to13$AGB_2008, na.rm = TRUE) #gives the biomass in Kg lost in this interval
biomassLossPerHectare1 <- kgLost1/1000/hectaresMeasured/5 #gives biomass Loss per hectare per year in this first interval, units: Mg/hectare/year (dividing by 1000 puts Kg to Mg)
idx2 <- Census2013$status%in%"A" & Census2018$status%in%c("D", "G")
mortality13to18 <- Census2013[idx2, ]
mortalityBySpecies2 <- mortality13to18%>%
group_by(sp)%>%
summarise(biomass=sum(AGB_2013))%>%
add_column(Interval= "2013 to 2018")%>%
mutate (biomassLossPerHectareSpecies = biomass/hectaresMeasured)
kgLost2 <- sum(mortality13to18$AGB_2013, na.rm = TRUE)
biomassLossPerHectare2 <- kgLost2/1000/hectaresMeasured/5
combinedMortalitySpecies1 <- rbind(mortalityBySpecies1, mortalityBySpecies2)
Census2023$status_2023 <- Census2023$status_current #this is kind of unnecessary but I feel like status current is kind of unclear so I am renaming it
merged2018_2023 <- merge(Census2018, Census2023, by="uid") #merging by unique id, I think x is Census2018 and y is Census 2023
#now we can filter or subset this merged data frame
mortality18to23 <- subset(merged2018_2023, status%in% "A" & status_2023%in% c("DC", "DN", "DT", "DS")) #subset that was alive in 2018 and dead in 2023
mortalityBySpecies3 <- mortality18to23%>%
group_by(sp.x)%>% #used sp.x because this is the merged data frame
summarise(biomass=sum(AGB_2018))%>%
add_column(Interval= "2018 to 2023")%>%
mutate(biomassLossPerHectareSpecies = biomass/hectaresMeasured )
mortalityBySpecies3%>%
rename(sp= sp.x)
mortalityBySpecies4<- mortalityBySpecies3 %>%
rename(
sp = sp.x
) #renaming column from sp.x to sp so it can bind with others
kgLost3 <- sum(mortality18to23$AGB_2018, na.rm = TRUE)
biomassLossPerHectare3 <- kgLost3/1000/hectaresMeasured/5
combinedMortalitySpeciesFinal <- rbind(combinedMortalitySpecies1, mortalityBySpecies4)
#now a plot needs to be made with each line as a species, NOTE- double check the units of biomass
##next step with this plot is to break it out by species so each species is its own line
ggplot(data=combinedMortalitySpeciesFinal, aes(x=Interval, y=biomassLossPerHectareSpecies))+
geom_point()
##making the mortalityFluxData
Flux <- c("AWM")
Year <- c(2013, 2018, 2023)
Interval <- c("2008to2013", "2013to2018", "2018to2023" )
Value <- c((biomassLossPerHectare1)*-1, (biomassLossPerHectare2)*-1,(biomassLossPerHectare3)*-1) #added negatives because it is mortality (biomass LOSS)
mortalityFluxData <- data.frame(Flux, Year, Interval, Value) #creating the data frame
figure3_mortalityFlux <- data.frame(Flux, Year, Interval, Value) #creating the data frame
#writing data frame as csv, exports to my local machine
write.csv(figure3_mortalityFlux, "doc/figure3_mortalityFlux.csv" , row.names=TRUE)
awmtable <- read.csv("doc/figure3_mortalityFlux.csv")
awrtable <- read.csv("doc/figure3_biomassRecruited.csv")
awmtable <- read.csv("doc/figure3_mortalityFlux.csv")
awptable <- read.csv("doc/woodyGrowthFlux.csv")
biomassfluxtable <- rbind(awrtable, awmtable, awptable)
ggplot(biomassfluxtable, aes(x=Interval, y=Value, group=Flux, col=Flux)) +
geom_line()
#Load libraries
library(allodb)
library(dplyr)
library(tidyverse)
#Read in data from past censuses and the species table
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem1.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem2.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem3.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.spptable.rdata"))
#Rename the data
Census_2008 <- scbi.stem1
Census_2013 <- scbi.stem2
Census_2018 <- scbi.stem3
Species_table <- scbi.spptable
#Combine the census data and species list
Census_2008_Species <- merge(Census_2008, Species_table, by ="sp")
Census_2013_Species <- merge(Census_2013, Species_table, by ="sp")
Census_2018_Species <- merge(Census_2018, Species_table, by ="sp")
#Read in data from 2023
Census_2023<- read.csv("data/census_data/scbi.stem4.csv")
#Combine the 2023 census data and species list
Census_2023_Species <- merge(Census_2023, Species_table, by ="sp")
#Define finished quadrats
Finished_quadrats <- unique(Census_2023_Species$quadrat)
##Use this line if you're interested in the biomass for the whole plot = Finished_quadrats <- unique(Census_2018$quadrat)
subset(Census_2023_Species, Census_2023_Species$quadrat %in% Finished_quadrats)
Census_2023_Finished <- subset(Census_2023_Species, Census_2023_Species$quadrat %in% Finished_quadrats)
#Finding the physical amount of space we measured
Hectares_measured <- length(Finished_quadrats)*20*20/10000
#Subset the 2008 quadrats by ones that are finished in 2023
subset(Census_2008_Species, Census_2008_Species$quadrat %in% Finished_quadrats)
Census_2008_Finished <- subset(Census_2008_Species, Census_2008_Species$quadrat %in% Finished_quadrats)
#Subset the 2013 quadrats by ones that are finished in 2023
subset(Census_2013_Species, Census_2013_Species$quadrat %in% Finished_quadrats)
Census_2013_Finished <- subset(Census_2013_Species, Census_2013_Species$quadrat %in% Finished_quadrats)
#Subset the 2018 qudrats by the ones that are finished in 2023
subset(Census_2018_Species, Census_2018_Species$quadrat %in% Finished_quadrats)
Census_2018_Finished <- subset(Census_2018_Species, Census_2018_Species$quadrat%in%Finished_quadrats)
latlong <- c(-78.1454, 38.8935)
Census_2008_Finished$Calculated_ABG <- get_biomass(dbh = as.numeric(Census_2008_Finished$dbh)/10, genus = Census_2008_Finished$Genus, species = Census_2008_Finished$Species, coords = latlong)
Census_2013_Finished$Calculated_ABG <- get_biomass(dbh = as.numeric(Census_2013_Finished$dbh)/10, genus = Census_2013_Finished$Genus, species = Census_2013_Finished$Species, coords = latlong)
Census_2018_Finished$Calculated_ABG_2018 <- get_biomass(dbh = as.numeric(Census_2018_Finished$dbh)/10, genus = Census_2018_Finished$Genus, species = Census_2018_Finished$Species, coords = latlong)
Census_2023_Finished$Calculated_ABG_2023 <- get_biomass(dbh = as.numeric(Census_2023_Finished$dbh_current)/10, genus = Census_2023_Finished$Genus, species = Census_2023_Finished$Species, coords = latlong)
#2008 to 2013 - Subsetting data
#Check to make sure the rows in each census match
all(Census_2008_Finished$tag == Census_2013_Finished$tag)
all(Census_2008_Finished$StemTag == Census_2013_Finished$StemTag)
#Filter by rows that are living in 2008
Living_2008 <-Census_2008_Finished[Census_2008_Finished$status == "A" & Census_2013_Finished$status == "A",]
#Filter by rows that are living in 2013
Living_2013 <-Census_2013_Finished[Census_2008_Finished$status == "A" & Census_2013_Finished$status == "A",]
#Subtract the biomass of the living trees in 2008 from the living trees in 2013
Woody_growth_2013 <- sum(Living_2013$Calculated_ABG - Living_2008$Calculated_ABG,na.rm=T)
print(Woody_growth_2013)
#Convert to megagrams and divide by number of hectares currently
Woody_growth_2013_mg_ha <- Woody_growth_2013/1000/Hectares_measured
print(Woody_growth_2013_mg_ha)
#Find woody growth per year
Woody_growth_2013_mg_ha_yr <- Woody_growth_2013_mg_ha/5
print(Woody_growth_2013_mg_ha_yr)
#2013 to 2018
#Check to make sure the rows in each census match
all(Census_2013_Finished$tag == Census_2018_Finished$tag)
all(Census_2013_Finished$StemTag == Census_2018_Finished$StemTag)
#Filter by rows that are living 2013
Living_2013 <- Census_2013_Finished[Census_2013_Finished$status == "A" & Census_2018_Finished$status == "A",]
#Filter by rows that are living in 2018
Living_2018 <- Census_2018_Finished[Census_2018_Finished$status == "A" & Census_2013_Finished$status == "A",]
#Subtract the biomass of the living trees in 2013 from the living trees in 2018
Woody_growth_2018 <- sum(Living_2018$Calculated_ABG_2018 - Living_2013$Calculated_ABG, na.rm=T)
print(Woody_growth_2018)
#Convert to megagrams and divide by number of hectares
Woody_growth_2018_mg_ha <- Woody_growth_2018/1000/Hectares_measured
print(Woody_growth_2018_mg_ha)
#Find woody growth per year
Woody_growth_2018_mg_ha_yr <- Woody_growth_2018_mg_ha/5
print(Woody_growth_2018_mg_ha_yr)
#2018 to 2023
#Create a unique ID for each stem so that you can compare stems from 2023 to 2018
Census_2018_Finished$UID <- paste(Census_2018_Finished$tag, Census_2018_Finished$StemTag, sep = "_")
Census_2023_Finished$UID <- paste(Census_2023_Finished$tag, Census_2023_Finished$StemTag, sep = "_")
#Create simplified tables
Census_2018_Simplified <- Census_2018_Finished[c("UID", "dbh", "status","Genus", "Species", "Calculated_ABG_2018")]
Census_2023_Simplified <- Census_2023_Finished[c("UID", "dbh_current", "status_current", "Genus", "Species", "Calculated_ABG_2023")]
Merged2018_2023 <- merge(Census_2018_Simplified, Census_2023_Simplified, by="UID", suffixes = c("_2018","_2023"))
#Now we can subset!
Woody_growth_18_23 <- subset(Merged2018_2023, status%in% "A" & status_current%in% "LI")
#Sum the 2018 biomass column and the 2023 biomass column
Woody_growth_23 <- sum(Woody_growth_18_23$Calculated_ABG_2023 - Woody_growth_18_23$Calculated_ABG_2018, na.rm = TRUE)
print(Woody_growth_23)
#Convert to megagrams and divide by number of hectares
Woody_growth_2023_mg_ha <- Woody_growth_23/1000/Hectares_measured
print(Woody_growth_2023_mg_ha)
#Find woody growth per year
Woody_growth_2023_mg_ha_yr <- Woody_growth_2023_mg_ha/5
print(Woody_growth_2023_mg_ha_yr)
#Creating a dataframe!
#Defining objects
flux <- c("AWP")
year <- c(2013, 2018, 2023)
interval <- c("2008to2013","2013to2018","2018to2023")
flx1 <- Woody_growth_2013_mg_ha_yr
flx2 <- Woody_growth_2018_mg_ha_yr
flx3 <- Woody_growth_2023_mg_ha_yr
all_fluxes <- c(flx1, flx2, flx3)
figure3_woodyGrowthFlux <- data.frame(Flux = flux, Year = year, Value = all_fluxes, Interval = interval)
write.csv(figure3_woodyGrowthFlux, "doc/figure3_woodGrowthFlux.csv")
awptable <- read.csv("doc/figure3_woodyGrowthFlux.csv")
figure3_woodyGrowthFlux <- data.frame(Flux = flux, Year = year, Value = all_fluxes, Interval = interval)
write.csv(figure3_woodyGrowthFlux, "doc/figure3_woodGrowthFlux.csv")
awptable <- read.csv("doc/figure3_woodGrowthFlux.csv")
awrtable <- read.csv("doc/figure3_biomassRecruited.csv")
awmtable <- read.csv("doc/figure3_mortalityFlux.csv")
awptable <- read.csv("doc/figure3_woodGrowthFlux.csv")
biomassfluxtable <- rbind(awrtable, awmtable, awptable)
ggplot(biomassfluxtable, aes(x=Interval, y=Value, group=Flux, col=Flux)) +
geom_line()
ggsave("figure3.png", width = 7, height = 7, units = "in", dpi = 300, path = "doc")
#load in libraries
library(allodb)
#Read in data from past censuses and the species table
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem1.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem2.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem3.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.spptable.rdata"))
#Rename the data
census2008 <- scbi.stem1
census2013 <- scbi.stem2
census2018 <- scbi.stem3
speciesTable <- scbi.spptable
#Read in data from 2023
census2023<- read.csv("data/census_data/scbi.stem4.csv")
#Combine the census data and species list
spCensus2008 <- merge(census2008, speciesTable, by ="sp")
spCensus2013 <- merge(census2013, speciesTable, by ="sp")
spCensus2018 <- merge(census2018, speciesTable, by ="sp")
spCensus2023 <- merge(census2023, speciesTable, by ="sp")
#create latxlong for the plot
latlong <- c(-78.1454, 38.8935)
length(unique(spCensus2023))
length(unique(spCensus2023$quadrat))
length(unique(spCensus2018$quadrat))
load(url("https://github.com/SCBI-ForestGEO/2023census/tree/main/processed_data"))
load(url("https://github.com/SCBI-ForestGEO/2023census/tree/main/processed_data"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem3.rdata"))
load(url("https://github.com/SCBI-ForestGEO/2023census/tree/main/processed_data/scbi.stem4.csv"))
read.csv("https://github.com/SCBI-ForestGEO/2023census/tree/main/processed_data/scbi.stem4.csv")
census2023 <- read.csv("https://github.com/SCBI-ForestGEO/2023census/tree/main/processed_data/scbi.stem4.csv")
View(census2023)
View(census2023)
read.csv(url("https://raw.githubusercontent.com/SCBI-ForestGEO/2023census/main/processed_data/scbi.stem4.csv"))
read.csv(url("https://raw.githubusercontent.com/SCBI-ForestGEO/2023census/main/processed_data/scbi.stem4.csv"))
census2023 <- read.csv(url("https://raw.githubusercontent.com/SCBI-ForestGEO/2023census/main/processed_data/scbi.stem4.csv"))
View(census2023)
View(census2023)
#Read in data from past censuses and the species table
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem1.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem2.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem3.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.spptable.rdata"))
#Rename the data
census2008 <- scbi.stem1
census2013 <- scbi.stem2
census2018 <- scbi.stem3
speciesTable <- scbi.spptable
census2023 <- read.csv(url("https://raw.githubusercontent.com/SCBI-ForestGEO/2023census/main/processed_data/scbi.stem4.csv"))
#Combine the census data and species list
spCensus2008 <- merge(census2008, speciesTable, by ="sp")
spCensus2013 <- merge(census2013, speciesTable, by ="sp")
spCensus2018 <- merge(census2018, speciesTable, by ="sp")
spCensus2023 <- merge(census2023, speciesTable, by ="sp")
#create latxlong for the plot
latlong <- c(-78.1454, 38.8935)
spCensus2008$Calculated_ABG <- get_biomass(dbh = as.numeric(spCensus2008$dbh)/10, genus = spCensus2008$Genus, species = spCensus2008$Species, coords = latlong)
spCensus2013$Calculated_ABG <- get_biomass(dbh = as.numeric(spCensus2013$dbh)/10, genus = spCensus2013$Genus, species = spCensus2013$Species, coords = latlong)
spCensus2018$Calculated_ABG <- get_biomass(dbh = as.numeric(spCensus2018$dbh)/10, genus = spCensus2018$Genus, species = spCensus2018$Species, coords = latlong)
spCensus2023$Calculated_ABG <- get_biomass(dbh = as.numeric(spCensus2023$dbh_current)/10, genus = spCensus2023$Genus, species = spCensus2023$Species, coords = latlong)
stock2008 <- sum(spCensus2008$Calculated_ABG, na.rm = TRUE)
stock2013 <- sum(spCensus2013$Calculated_ABG, na.rm = TRUE)
stock2018 <- sum(spCensus2018$Calculated_ABG, na.rm = TRUE)
stock2023 <- sum(spCensus2023$Calculated_ABG, na.rm = TRUE)
#creating the data frame
stock <- c("AGB")
year <- c(2008, 2013, 2018, 2023)
all_stocks <- c(stock2008, stock2013, stock2018, stock2023)
figure2_agb <- ggplot(figure2_agb, aes(x=year, y=stock)) +
geom_line()
library(ggplot2)
figure2_agb <- ggplot(figure2_agb, aes(x=year, y=stock)) +
geom_line()
figure2_agb <- ggplot() +
geom_line(figure2_agb, aes(x=year, y=stock))
length(unique(spCensus2023$quadrat))
figure2_agb <- ggplot() +
geom_line(figure2_agb, aes(x=year, y=stock))
figure2_agb <- ggplot(figure2_agb, aes(x=year, y=stock)) +
geom_line()
figure2_agb <- ggplot() +
geom_line(data = year)
figure2_agb <- ggplot() +
geom_line(data = year, aes(fill = year))
figure2_agb <- data.frame(y = stock,  x = Year, Interval, stock)
figure2_agb <- data.frame(y = stock,  x = year)
figure2_agb
figure2_agb <- data.frame(y = stock,  x = year, all_stocks)
figure2_agb
figure2_agb <- ggplot(figure2_agb, aes(x=all_stocks, y=year)) +
geom_line())
figure2_agb <- ggplot(figure2_agb, aes(x=all_stocks, y=year)) +
geom_line()
View(figure2_agb)
View(figure2_agb)
ggplot(figure2_agb, aes(x=all_stocks, y=year)) +
geom_line()
ggplot(figure2_agb, aes(x=all_stocks, y=year, group=stock, col=stock)) +
geom_line()
ggplot(figure2_agb, aes(x=all_stocks, y=year, group=1)) +
geom_line()
figure2_agb <- data.frame(y = stock,  x = year, all_stocks)
View(figure2_agb)
figure2_agb <- data.frame(y = year,  x = all_stocks)
View(figure2_agb)
ggplot(figure2_agb, aes(x=all_stocks, y=year, group=1)) +
geom_line()
ggplot(figure2_agb, aes(y=all_stocks, x=year, group=1)) +
geom_line()
ggplot(figure2_agb, aes(y=all_stocks, x=year, group=1, col = year)) +
geom_line()
ggplot(figure2_agb, aes(y=all_stocks, x=year, group=2, col = year)) +
geom_line()
ggplot(figure2_agb, aes(y=all_stocks, x=year, group=2, col = all_stocks)) +
geom_line()
ggplot(figure2_agb, aes(y=all_stocks, x=year, group=2, col = all_stocks)) +
geom_line() +
geom_point
ggplot(figure2_agb, aes(y=all_stocks, x=year, group=2, col = all_stocks)) +
geom_line() +
geom_point()
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point()
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point() +
labs( title = Carbon Stock Per Year)
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point() +
labs(title = "Carbon Stock Per Year")
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point() +
labs(title = "Carbon Stock Per Year", xlab = "Carbon Stock", ylab = "year")
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point() +
labs(title = "Carbon Stock Per Year", xlab = "Carbon Stock", ylab = "Year")
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point() +
labs(title = "Carbon Stock Per Year", xlab = "Carbon Stock", ylab = "Year")
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point() +
labs(title = "Carbon Stock Per Year") +
xlab = "Carbon Stock" +
ylab = "Year"
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point() +
labs(title = "Carbon Stock Per Year", xlab = "Carbon Stock", ylab = "Year")
ggplot(figure2_agb, aes(y=all_stocks, x=year)) +
geom_line() +
geom_point() +
labs(title = "Carbon Stock Per Year", xlab = "Carbon Stock", ylab = "Year")
64*20*20/10000
(64*20*20)/10000
(640*20*20)/10000
#load in libraries
library(allodb)
library(ggplot2)
#Read in data from past censuses and the species table
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem1.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem2.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.stem3.rdata"))
load(url("https://github.com/SCBI-ForestGEO/SCBI-ForestGEO-Data/raw/master/tree_main_census/data/scbi.spptable.rdata"))
#Rename the data
census2008 <- scbi.stem1
census2013 <- scbi.stem2
census2018 <- scbi.stem3
speciesTable <- scbi.spptable
census2023 <- read.csv(url("https://raw.githubusercontent.com/SCBI-ForestGEO/2023census/main/processed_data/scbi.stem4.csv"))
